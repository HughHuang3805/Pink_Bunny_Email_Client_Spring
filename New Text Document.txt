case "Next":
			/*email = myGui.getEmail();//get the email
			if(email != null && !email.equals("")){
				host = email.substring(email.indexOf("@") + 1, email.indexOf(".")).toLowerCase();//see what kind of host the user is using
				smtpServer = smtpServers.get(host.toUpperCase());//check what smtp server it is using for that host
				portNumber = portNumbers.get(host.toUpperCase());//check what port it is using for that host
				imapServer = imapServers.get(host.toUpperCase());
				if(smtpServer != null & portNumber != null){
					emailServer.setSMTPServer(smtpServer);//set smtp server
					emailServer.setPort(Integer.parseInt(portNumber));//set port number
					emailServer.setUsername(email);//set user email
					emailServer.setImapHost(imapServer);
					System.out.println(smtpServer);
					System.out.println(portNumber);
					System.out.println(host);
					System.out.println(email);
					//used to check if this email has a yubikey attached to it
					HttpClient yubikeyClient = HttpClients.createDefault();
					//https://boiling-fjord-84786.herokuapp.com/yubikey
					HttpPost yubikeyPost = new HttpPost("https://boiling-fjord-84786.herokuapp.com/yubikey");
					List<NameValuePair> parameters = new ArrayList<NameValuePair>();
					parameters.add(new BasicNameValuePair("Email", email));

					try{
						yubikeyPost.setEntity(new UrlEncodedFormEntity(parameters));//email and yubikey POST as the body of request
						HttpResponse response1 = yubikeyClient.execute(yubikeyPost);//wait for a response from the server
						BufferedReader rd1 = new BufferedReader(new InputStreamReader(response1.getEntity().getContent()));//reader for the response
						String hasYubikeyString = rd1.readLine();//read the response
						System.out.println("Has yubikey String:" + hasYubikeyString);
						if(hasYubikeyString != null){
							if(hasYubikeyString.charAt(0) == '0')//if response is 0, false
								hasYubikey = false;
							else if(hasYubikeyString.charAt(0) == '1')//if response is 1, true
								hasYubikey = true;
						}
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

					myGui.emailPanel.setVisible(false);//fisrt hide email panel
					myGui.buttonPanel.setVisible(false);//hide button panel
					myGui.buttonPanel.removeAll();//remove whatever is in button panel
					myGui.addAccountFrame.repaint();//repaint the gui

					myGui.setPasswordPanel();//set up password panel
					myGui.passwordPanel.setVisible(true);//make the password panel visible
					myGui.addAccountFrame.repaint();//repaint the gui

					break;
				} else {
					JOptionPane.showMessageDialog(myGui.addAccountFrame, "Email not supported, try again.", "oops ...", JOptionPane.WARNING_MESSAGE);
					break;
				}
			} else {
				JOptionPane.showMessageDialog(myGui.addAccountFrame, "Please enter an email.", "oops ...", JOptionPane.WARNING_MESSAGE);
				break;
			}*/

		/*case "Sign-in":
			boolean emailAuthenticated = false;
			emailServer.setPassword(myGui.getPassword());
			try {
				emailAuthenticated = emailServer.connect();//try to connect
				System.out.println("Has yubikey: " + hasYubikey);
				if(!emailAuthenticated)
					JOptionPane.showMessageDialog(myGui.addAccountFrame, "Wrong email or password, try again.", "oops ...", JOptionPane.WARNING_MESSAGE);
				else{
					if(hasYubikey){
						myGui.setYubikeyFrame(emailServer);//set up yubikey panel
					} else {//if this email doesnt have yubikey 
						myGui.enableAllMenuItems();
						emailServer.getLoginFrame().dispose();
						//myGui.setMainPanel(userEmails, this);
					}
				}
			} catch (GeneralSecurityException e3) {//first check to see if it is a correct email/password combo
				// TODO Auto-generated catch block
				e3.printStackTrace();
			} catch (IllegalArgumentException iae){
				JOptionPane.showMessageDialog(myGui.addAccountFrame, "Not a valid OTP(One-Time-Password) format.", "Error", JOptionPane.ERROR_MESSAGE);
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} 
			break;*/

		/*case "Verify":
			boolean yubikeyAuthenticated = false, otpAuthenticated = false;
			String verificationString = "";
			HttpClient authenticationClient = HttpClients.createDefault();
			//https://boiling-fjord-84786.herokuapp.com/authenticate
			HttpPost authenticationPost = new HttpPost("https://boiling-fjord-84786.herokuapp.com/authenticate");
			int counter = 0;
			while(verificationString == ""){
				try {
					List<NameValuePair> params = new ArrayList<NameValuePair>();
					params.add(new BasicNameValuePair(email, myGui.getYubikey()));
					//System.out.println(myGui.getEmail());
					authenticationPost.setEntity(new UrlEncodedFormEntity(params));//email and yubikey POST as the body of request
					HttpResponse response2 = authenticationClient.execute(authenticationPost);//wait for a response from the server
					BufferedReader rd2 = new BufferedReader(new InputStreamReader(response2.getEntity().getContent()));//read the response
					verificationString = rd2.readLine();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				counter++;
				if(counter == 5){//if verification is not successful, quit the program
					JOptionPane.showMessageDialog(emailServer.getLoginFrame(), "Error encountered when verifying, please restart program.", "Error", JOptionPane.ERROR_MESSAGE);
					myGui.dispose();
					System.exit(0);
					break;
				}
			}
			if(verificationString.charAt(0) == '1'){//check if email and yubikey binding is correct
				yubikeyAuthenticated = true;
			} else{
				JOptionPane.showMessageDialog(emailServer.getLoginFrame(), "Not a valid YubiKey.", "Error", JOptionPane.ERROR_MESSAGE);
			}

			if(yubikeyAuthenticated && verificationString.charAt(1) == '1'){//check if binding is correct and correct OTP
				otpAuthenticated = true;
				JOptionPane.showMessageDialog(emailServer.getLoginFrame(), "Successfully verified OTP(One-Time-Password)", "Succeed", JOptionPane.INFORMATION_MESSAGE);
			} else{
				JOptionPane.showMessageDialog(emailServer.getLoginFrame(), "Failed to verify OTP(One-Time-Password)", "Failed", JOptionPane.ERROR_MESSAGE);
			}
			System.out.println(verificationString);
			System.out.println(yubikeyAuthenticated);
			System.out.println(otpAuthenticated);
			if(yubikeyAuthenticated && otpAuthenticated){//if everything is correct, then show messages and allow log in
				emailServer.getLoginFrame().dispose();
				myGui.enableAllMenuItems();
				//myGui.setMainPanel(userEmails);
			} 
			break;*/

		/*case "Cancel":
			emailServer.getLoginFrame().dispose();
			break;*/

			/*case "Send":
			emailServer = emailObjectMap.get(myGui.getEmailFromCombobox());
			emailServer.setUsername(myGui.getEmailFromCombobox());
			System.out.println("Email server is null " + emailServer == null);
			if(myGui.getPassword() == null || myGui.getPassword().isEmpty()){//if the user has not logged in 
				JOptionPane.showMessageDialog(myGui.addAccountFrame, "Please log in first.", "Failed", JOptionPane.ERROR_MESSAGE);
				myGui.setLoginFrame(emailServer);
				break;
			} else{
				emailServer.setPassword(myGui.getPassword());
			}

			if(myGui.getRecipient() != null && !myGui.getRecipient().isEmpty()){
				emailServer.setRecipient(myGui.getRecipient());
			} else{
				JOptionPane.showMessageDialog(emailServer.getWriteFrame(), "Please specify recipient.", "Failed", JOptionPane.ERROR_MESSAGE);
				System.out.println("Write Frame null: " + emailServer.getWriteFrame() == null);
				break;
			}
			emailServer.setSubject(myGui.getSubject());
			try {
				emailServer.send(host, myGui.getEmailContentText());
				myGui.setSendDebugTextArea();
				JOptionPane.showMessageDialog(emailServer.getWriteFrame(), "Message sent!");
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			break;*/

			/*case "Log-in":
			//emailServer = emailObjectMap.get(myGui.getEmailFromCombobox());
			emailServer.setPassword(myGui.getPassword());
			System.out.println("Email server name: " + emailServer.getUsername());
			if(email != null && !email.equals("")){
				host = email.substring(email.indexOf("@") + 1, email.indexOf(".")).toLowerCase();//see what kind of host the user is using
				smtpServer = smtpServers.get(host.toUpperCase());//check what smtp server it is using for that host
				portNumber = portNumbers.get(host.toUpperCase());//check what port it is using for that host
				imapServer = imapServers.get(host.toUpperCase());
				if(smtpServer != null & portNumber != null){
					emailServer.setHostName(smtpServer);//set smtp server
					emailServer.setPort(Integer.parseInt(portNumber));//set port number
					emailServer.setUsername(email);//set user email
					emailServer.setImapHost(imapServer);
					System.out.println(smtpServer);
					System.out.println(portNumber);
					System.out.println(host);
					System.out.println(email);
					//used to check if this email has a yubikey attached to it
					HttpClient yubikeyClient = HttpClients.createDefault();
					//https://boiling-fjord-84786.herokuapp.com/yubikey
					HttpPost yubikeyPost = new HttpPost("https://boiling-fjord-84786.herokuapp.com/yubikey");
					List<NameValuePair> parameters = new ArrayList<NameValuePair>();
					parameters.add(new BasicNameValuePair("Email", email));

					try{
						yubikeyPost.setEntity(new UrlEncodedFormEntity(parameters));//email and yubikey POST as the body of request
						HttpResponse response1 = yubikeyClient.execute(yubikeyPost);//wait for a response from the server
						BufferedReader rd1 = new BufferedReader(new InputStreamReader(response1.getEntity().getContent()));//reader for the response
						String hasYubikeyString = rd1.readLine();//read the response
						//System.out.println(hasYubikeyString);
						if(hasYubikeyString != null){
							if(hasYubikeyString.charAt(0) == '0')//if response is 0, false
								hasYubikey = false;
							else if(hasYubikeyString.charAt(0) == '1')//if response is 1, true
								hasYubikey = true;
						}
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}

					myGui.passwordPanel.setVisible(false);//fisrt hide email panel
					myGui.buttonPanel.setVisible(false);//hide button panel
					myGui.buttonPanel.removeAll();//remove whatever is in button panel
					emailServer.getLoginFrame().repaint();//repaint the gui

					boolean emailAuthenticated2 = false;
					try {
						emailAuthenticated2 = emailServer.connect(host);//try to connect
						System.out.println("Has yubikey: " + hasYubikey);
						if(!emailAuthenticated2)
							JOptionPane.showMessageDialog(emailServer.getLoginFrame(), "Wrong email or password, try again.", "oops ...", JOptionPane.WARNING_MESSAGE);
						else{
							if(hasYubikey){
								myGui.setYubikeyPanel(emailServer);//set up yubikey panel
							} else {//if this email doesnt have yubikey 
								myGui.enableAllMenuItems();
								emailServer.getLoginFrame().dispose();
							}
						}
					} catch (GeneralSecurityException e3) {//first check to see if it is a correct email/password combo
						// TODO Auto-generated catch block
						e3.printStackTrace();
					} catch (IllegalArgumentException iae){
						JOptionPane.showMessageDialog(emailServer.getLoginFrame(), "Not a valid OTP(One-Time-Password) format.", "Error", JOptionPane.ERROR_MESSAGE);
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					} 
					break;
				} else {
					JOptionPane.showMessageDialog(emailServer.getLoginFrame(), "Email not supported, try again.", "oops ...", JOptionPane.WARNING_MESSAGE);
					break;
				}
			} 
			break;
			 */
		/*case "Secure Send":
			BufferedWriter bw;
			emailServer = emailObjectMap.get(myGui.getEmailFromCombobox());
			emailServer.setUsername(myGui.getEmailFromCombobox());
			if(myGui.getPassword() == null || myGui.getPassword().isEmpty()){//if the user has not logged in 
				JOptionPane.showMessageDialog(myGui.addAccountFrame, "Please log in first.", "Failed", JOptionPane.ERROR_MESSAGE);
				myGui.setLoginFrame(emailServer);
				break;
			} else{
				emailServer.setPassword(myGui.getPassword());
			}

			if(myGui.getSecureRecipient() != null && !myGui.getSecureRecipient().isEmpty()){
				emailServer.setRecipient(myGui.getSecureRecipient());
			} else{
				JOptionPane.showMessageDialog(myGui.addAccountFrame, "Please specify recipient.", "Failed", JOptionPane.ERROR_MESSAGE);
				break;
			}

			try {
				bw = new BufferedWriter(new FileWriter("plain-text.txt"));
				myGui.secureEmailContentText.write(bw);
				//myGui.setEmailBodyTextArea();
			} catch (IOException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}

			try {
				emailServer.encryptedSend();
				myGui.setSecureSendDebugTextArea();;
				JOptionPane.showMessageDialog(emailServer.getSecureWriteFrame(), "Message sent!");
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			break;*/